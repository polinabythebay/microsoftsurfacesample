<s:SurfaceWindow x:Class="PolinaSoshninSurfaceSample.SurfaceWindow1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:s="http://schemas.microsoft.com/surface/2008"
    Title="PolinaSoshninSurfaceSample" mc:Ignorable="d" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" d:DesignHeight="270" d:DesignWidth="618" SizeToContent="WidthAndHeight">
  
    
    <s:SurfaceWindow.Resources>
        
        <!-- This is an alternative way to populating Library Bar and Library Stack. See SurfaceWindow1.xaml.cs for the way I implemented it in this 
        example-->
       <!-- <XmlDataProvider x:Key="Data" XPath="Photos">
            <x:XData>
                <Photos xmlns="">
                    <Picture Path="Images/Chrysanthemum.jpg" Category="Flora" />
                    <Picture Path="Images/Hydrangeas.jpg" Category="Flora" />
                    <Picture Path="Images/Jellyfish.jpg" Category="Fauna" />
                    <Picture Path="Images/Koala.jpg" Category="Fauna" />
                    <Picture Path="Images/Lighthouse.jpg" Category="Scenic" />
                    <Picture Path="Images/Penguins.jpg" Category="Fauna" />
                    <Picture Path="Images/Tulips.jpg" Category="Flora" />   
                </Photos>
            </x:XData>     
        </XmlDataProvider> -->
       
        <!-- CollectionViewSource Container which will connect the XMLDataprovider to the LibraryContainer-->
        <!--
        <CollectionViewSource
                x:Key="Source"
                Source="{Binding Source={StaticResource Data}, XPath=Picture}">
            <CollectionViewSource.GroupDescriptions>
                <PropertyGroupDescription PropertyName="@Category" />
            </CollectionViewSource.GroupDescriptions>
        </CollectionViewSource>

        <DataTemplate x:Key="ContainerItemTemplate">
            <Image Source="{Binding XPath=@Path}" MaxWidth="200"/>
        </DataTemplate>
        -->
        
        
        
        
        <!-- Templates I use for Library Stack, Library Bar, and ScatterView. The ImageAndCaption Template displays the filename of the image-->
        <DataTemplate x:Key="ImageOnlyTemplate">
            
            <Image Source="{Binding Source}" MaxWidth="600"/>
        </DataTemplate>     
        
        <DataTemplate x:Key="ImageAndCaptionTemplate">
            <StackPanel>
                
                <Image Source="{Binding Source}" MaxWidth="200" MaxHeight="50" Stretch="Uniform" />
                <TextBlock Text="{Binding Source}" MaxWidth="200" TextWrapping="Wrap" HorizontalAlignment="Center" />
            </StackPanel>
            
        </DataTemplate>
        
        <!-- This is a WPF Style to use to create a visual for the cursor during a drag-drop operation-->
        <Style x:Key="CursorStyle" TargetType="{x:Type ContentControl}">
            <Setter Property="ContentTemplate"
                    Value="{StaticResource ImageAndCaptionTemplate}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContentControl}">
                        <ContentPresenter
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}">
                            
                        </ContentPresenter>
                    </ControlTemplate>
                </Setter.Value>

            </Setter>
            
        </Style>
    
    </s:SurfaceWindow.Resources>

    
    
    <!-- Begin the UI elements for this sample Surface application-->
    <DockPanel>

        <UniformGrid VerticalAlignment="Top" Background="Purple" Height="50" DockPanel.Dock="Top" Columns="3" Name="BottomGrid" Width="Auto">
            <s:SurfaceButton Name="HelloButton" HorizontalContentAlignment="Center" Content="Hello, Welcome to my Surface Sample!" Background="Aqua" Click="HelloButton_click"></s:SurfaceButton>
        </UniformGrid>

        <Grid VerticalAlignment="Top" Background="Purple" Height="50" DockPanel.Dock="Bottom"  Name="BottomGrid1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid VerticalAlignment="Top" Background="Beige" Height="50" Name="BottomGrid2" Grid.Column="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <s:SurfaceButton Name="Germany" HorizontalContentAlignment="Center" Content="Germany" Background="OrangeRed" Click="Germany_click"></s:SurfaceButton>
                <s:SurfaceButton Name="Greece" HorizontalContentAlignment="Center" Content="Greece" Background="CornflowerBlue" Grid.Column="1" Click="Greece_click"></s:SurfaceButton>
                <s:SurfaceButton Name="Morocco" HorizontalContentAlignment="Center" Content="Morocco" Background="Goldenrod" Grid.Column="2" Click="Morocco_click"></s:SurfaceButton>
            </Grid>

           
        </Grid>

      
    <Grid Background="Purple" Name="outergrid">
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <Grid Background="Purple" Name="innerGrid">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>

                <!-- Library container for library Bar. This is how you would implement XmlData into a Library Container -->
       <!-- <s:LibraryContainer ItemsSource="{Binding Source={StaticResource Source}}" HorizontalAlignment="Center" Name="CategoryContainer" VerticalAlignment="Center">
            <s:LibraryContainer.StackView>
                <s:StackView ItemTemplate="{StaticResource ContainerItemTemplate}"/>
                
            </s:LibraryContainer.StackView>
            <s:LibraryContainer.BarView>
                <s:BarView ItemTemplate="{StaticResource ContainerItemTemplate}"/>
                
            </s:LibraryContainer.BarView>
            </s:LibraryContainer> -->

            
            <!--Libary Container using PhotoData.cs and Drag and Drop API. This contains all of the photos initially -->
            <s:LibraryContainer x:Name="LibraryContainer1" ItemsSource="{Binding Path=LibraryItems}" HorizontalAlignment="Center" Grid.Column="0" VerticalAlignment="Center">
                <s:LibraryContainer.BarView>
                    <s:BarView ItemTemplate="{StaticResource ImageOnlyTemplate}"/>


                </s:LibraryContainer.BarView>
                <s:LibraryContainer.StackView>
                    <s:StackView ItemTemplate="{StaticResource ImageOnlyTemplate}"/>

                </s:LibraryContainer.StackView>


            </s:LibraryContainer>


            <!--Another Libary Container using Drag and Drog API. This does not contain any photos initially-->
             <s:LibraryContainer x:Name="LibraryContainer" ItemsSource="{Binding Path=LibraryItems1}" HorizontalAlignment="Center" Grid.Column="1" VerticalAlignment="Center" Grid.Row="1">
                <s:LibraryContainer.BarView>
                    <s:BarView ItemTemplate="{StaticResource ImageOnlyTemplate}"/>
                     </s:LibraryContainer.BarView>
                <s:LibraryContainer.StackView>
                    <s:StackView ItemTemplate="{StaticResource ImageOnlyTemplate}"/>
                     </s:LibraryContainer.StackView>   
            </s:LibraryContainer> 

        </Grid>

        <!-- This allows the use of Fiducial Markers. See the TagVisualizer API for more info-->
        <s:TagVisualizer x:Name="TagVisualizer1" Grid.Row="0" Grid.Column="1">

            <s:TagVisualizer.Definitions>
                <s:TagVisualizationDefinition
                    Value="1"
                    Source="TagVisualization1.xaml"
					LostTagTimeout="2000" 
                    OrientationOffsetFromTag="0"
                    PhysicalCenterOffsetFromTag="0,-1.5"
                    UsesTagOrientation="True" 
                    TagRemovedBehavior="Fade" x:Name="GermanyFact" />

                <s:TagVisualizationDefinition
                    Value="2"
					Source="TagVisualization2.xaml"
					LostTagTimeout="2000" 
                    OrientationOffsetFromTag="0"
                    PhysicalCenterOffsetFromTag="0,-1.5"
                    UsesTagOrientation="True" 
                    TagRemovedBehavior="Fade" x:Name="GermanyVideo" />

                <s:TagVisualizationDefinition 
                    Value="3" 
                    Source="TagVisualization3.xaml" 
                    LostTagTimeout="2000"
                    OrientationOffsetFromTag="0"
                    PhysicalCenterOffsetFromTag="0, -1.5"
                    UsesTagOrientation="True"
                    TagRemovedBehavior="Fade" x:Name="GreeceVideo" />

                <s:TagVisualizationDefinition 
                    Value="4" 
                    Source="TagVisualization4.xaml" 
                    LostTagTimeout="2000"
                    OrientationOffsetFromTag="0"
                    PhysicalCenterOffsetFromTag="0, -1.5"
                    UsesTagOrientation="True"
                    TagRemovedBehavior="Fade" x:Name="GreeceFact" />

                <s:TagVisualizationDefinition 
                    Value="5" 
                    Source="TagVisualization5.xaml" 
                    LostTagTimeout="2000"
                    OrientationOffsetFromTag="0"
                    PhysicalCenterOffsetFromTag="0, -1.5"
                    UsesTagOrientation="True"
                    TagRemovedBehavior="Fade" x:Name="MoroccoVideo" />

                <s:TagVisualizationDefinition 
                    Value="6" 
                    Source="TagVisualization6.xaml" 
                    LostTagTimeout="2000"
                    OrientationOffsetFromTag="0"
                    PhysicalCenterOffsetFromTag="0, -1.5"
                    UsesTagOrientation="True"
                    TagRemovedBehavior="Fade" x:Name="MoroccoFact" />

                 </s:TagVisualizer.Definitions>
           
            <!--ScatterView will work on the same surface as the fiducial markers if you nest it within the TagVisualizer -->
            <!-- AllowDrop Enables UI control to receive Drop events from the SurfaceDragDrop API -->
            <!-- The default behavior of a ScatterView control is to limit the drag-drop operations to its bounds
                In this example I write my own behavior by adding handlers to PreviewTouchDown and SurfaceDragDrop-->
            <s:ScatterView  
            Grid.Row="1"
            VerticalAlignment="Center"
            x:Name="scatter"
            ItemTemplate="{StaticResource ImageOnlyTemplate}"
            ItemsSource="{Binding ScatterItems}"
            AllowDrop= "True" 
            PreviewTouchDown="Scatter_PreviewTouchDown"
            s:SurfaceDragDrop.DragCanceled="Scatter_DragCanceled"
            s:SurfaceDragDrop.DragCompleted="Scatter_DragCompleted" 
            Background="DarkBlue"
            s:SurfaceDragDrop.Drop= "Scatter_Drop" HorizontalAlignment="Center" Grid.RowSpan="1" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
                
            <!-- If you want to change the background of ScatterView to an image in the XAML file. For changing the background in the .cs file 
                see SurfaceWindow1.cs
            <s:ScatterView.Background>
                <ImageBrush ImageSource="Images\Desert.jpg" Stretch="Fill" TileMode="None"/>
            </s:ScatterView.Background> -->
            </s:ScatterView>
            
        </s:TagVisualizer>

    </Grid>

    </DockPanel>

</s:SurfaceWindow>
